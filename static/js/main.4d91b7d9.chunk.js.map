{"version":3,"sources":["assets/logo.png","components/header/Header.js","components/footer/Footer.js","components/form/Preview.js","About.js","StyleOptions.js","components/form/Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","logo","alt","Footer","href","Preview","state","firstName","this","props","previewInputs","lastName","linkedIn","subtitle","email","twitter","instagram","background","blog","other","color","backgroundImage","font","previewStyle","width","height","backgroundRepeat","backgroundPosition","style","Component","About","onSubmit","event","preventDefault","console","log","setState","handleOnChange","inputName","target","name","val","value","formInputs","action","htmlFor","type","onChange","hidden","API_KEY","process","REACT_APP_UNSPLASH_API_KEY","StyleOptions","handleChangeColor","usersColor","backgroundSelected","bringImages","setTimeout","propPasser","handleChangeFont","handleImageClick","handleResetClick","document","getElementById","reset","styleInputs","bind","query","page","axios","method","url","params","client_id","then","res","data","results","id","defaultChecked","onClick","map","image","key","urls","full","alt_description","backgroundColor","Form","formParamInputs","param","Object","entries","styleParamInputs","step","to","exact","path","render","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4d91b7d9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ad25eba7.png\";","import React from 'react';\nimport logo from '../../assets/logo.png'\n\nfunction Header() {\n    return (\n        <header>\n            <div className=\"titleContainer\">\n                <img src={logo} alt=\"Future Developer logo\" />\n                <h1>Future Developer</h1>\n            </div>\n            <div className=\"sectionContainer\">\n                <ul>\n                    <li>\n                        <div className=\"sectionBubble\"></div>\n                        <p>Your Information</p>\n                    </li>\n                    <li>\n                        <div className=\"sectionBubble\"></div>\n                        <p>Options</p>\n                    </li>\n                    <li>\n                        <div className=\"sectionBubble\"></div>\n                        <p>Preview</p>\n                    </li>\n                    <li>\n                        <div className=\"sectionBubble\"></div>\n                        <p>Save/Submit</p>\n                    </li>\n                </ul> \n\n            </div>\n        </header>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport logo from '../../assets/logo.png'\n\nfunction Footer() {\n    return (\n        <footer>\n            <div className=\"wrapper\">\n                <div className=\"footerLinks\">\n                    <img src={logo} alt=\"Future Developer logo\" />\n                    <ul>\n                        <li><a href=\"mmm.com\">ANNA</a></li>\n                        <li><a href=\"https.com\">EDWARD</a></li>\n                        <li><a href=\"lslsl.com\">MARIE</a></li>\n                        <li><a href=\"http://maximilianlau.com\">MAX</a></li>\n                    </ul>\n                </div>\n            </div>\n        </footer>\n    )\n}\n\nexport default Footer;","import React, { Component } from \"react\";\nimport './Preview.css'\n\n\nclass Preview extends Component {\n    constructor() {\n        super();\n        this.state = {\n        }\n    }\n\n\n\n    \n    render() {\n\n        // if email, linkedin, twitter, instagram, blog or other are empty \n        // dont show icon\n        const firstName = this.props.previewInputs.firstName\n        const lastName = this.props.previewInputs.lastName\n        const subtitle = this.props.previewInputs.subtitle\n        const email = this.props.previewInputs.email\n        const linkedIn = this.props.previewInputs.linkedIn\n        const twitter = this.props.previewInputs.twitter\n        const instagram = this.props.previewInputs.instagram\n        const blog = this.props.previewInputs.blog\n        const other = this.props.previewInputs.other\n        const color = this.props.previewInputs.color\n        const background = this.props.previewInputs.background\n        const backgroundImage = this.props.previewInputs.backgroundImage\n        const font = this.props.previewInputs.font\n        \n        const previewStyle = {\n            width: \"90%\",\n            height: \"60%\",\n            backgroundImage: `url(${backgroundImage})`,\n            background: `${background}`,\n            backgroundRepeat: 'no-repeat',\n            backgroundPosition: 'center',\n            font: `${font}`\n        }\n\n        \n        return(\n            \n            <div className=\"previewSitePage\">\n                <h1>What do you think?</h1>\n                <div className=\"wrapper previewViewPort\" style={previewStyle}>\n                    <div className=\"decorativeBackSplash\">\n                        <h2>Hello I'm {firstName} {lastName}!</h2>\n                        <h3>My website is comming soon!</h3>\n                        <h4>{this.state.subtitle}</h4>\n                        <ul>\n                            <li>\n                                <a href={`https://twitter.com/${twitter}`}><i className=\"fab fa-twitter\"></i></a>\n                            </li>\n                            <li>\n                                <a href={`https://www.linkedin.com/in/${linkedIn}`}><i className=\"fab fa-linkedin-in\"></i></a>\n                            </li>\n                            <li>\n                                <a href={`https://www.instagram.com/${instagram}`}><i className=\"fab fa-instagram\"></i></a>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default Preview","import React, { Component } from 'react';\n\nclass About extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            firstName: \"\",\n            lastName: \"\",\n            subtitle: \"\",\n            email: \"\",\n            linkedIn: \"\",\n            twitter: \"\",\n            blog: \"\",\n            other: \"\",\n        }\n    }\n\n    onSubmit = (event) => {\n        //prevent default page refresh\n        event.preventDefault();\n        console.log(\"you submitted!\")\n        \n        //emptying states after submission and other code is done using them (so it doesn't sit in form boxes)\n        this.setState({\n            firstName: \"\",\n            lastName: \"\",\n            subtitle: \"\",\n            email: \"\",\n            linkedIn: \"\",\n            twitter: \"\",\n            blog: \"\",\n            other: \"\",\n        })\n    }\n\n\n    //below is to test simplified data collection. By setting nam in an array we can take the val of any input. Saving that to a unique state is the part I so far can't figure out.\n    handleOnChange = (event) => {\n        // console.log(event.target.value);\n        // setting the name and val to their own variables allows us to set them to their own states without having to write multiple setStates for each form input.\n        let inputName = event.target.name\n        let val = event.target.value\n        this.setState({\n            [inputName]: val\n        })\n        this.props.formInputs(this.state)\n    }\n\n    render() {\n        return (\n            <div className=\"formContainer formWrapper\">\n                <form action=\"\" onSubmit={this.onSubmit}>\n\n                    <fieldset className=\"firstLastName\">\n                        <div className=\"firstNameDiv\">\n                        <label htmlFor=\"firstName:\">First name:</label>\n                        <input type=\"text\" value={this.state.firstName} onChange={this.handleOnChange} name=\"firstName\" />\n                        </div>\n                        <div className=\"lastNameDiv\">\n                        <label htmlFor=\"lastName:\">Last name:</label>\n                        <input type=\"text\" value={this.state.lastName} onChange={this.handleOnChange} name=\"lastName\" />\n                        </div>\n                    </fieldset>\n\n                    <fieldset className=\"subtitle\">\n                        <label htmlFor=\"subtitle\">Subtitle:</label>\n                        <input type=\"text\" value={this.state.subtitle} onChange={this.handleOnChange} name=\"subtitle\" />\n                    </fieldset>\n\n                    <fieldset className=\"email\">\n                        <label htmlFor=\"email\">Email:</label>\n                        <input type=\"email\" value={this.state.email} onChange={this.handleOnChange} name=\"email\" />\n                    </fieldset>\n\n                    <fieldset className=\"socialMedia\">\n                        <div>\n                        <label htmlFor=\"linkedIn\">LinkedIn</label>\n                        <input type=\"text\" value={this.state.linkedIn} onChange={this.handleOnChange} name=\"linkedIn\" />\n                        </div>\n\n                        <div>\n                        <label htmlFor=\"twitter\">Twitter:</label>\n                        <input type=\"text\" value={this.state.twitter} onChange={this.handleOnChange} name=\"twitter\" />\n                        </div>\n\n                        <div>\n                        <label htmlFor=\"blog\">Blog:</label>\n                        <input type=\"text\" value={this.state.blog} onChange={this.handleOnChange} name=\"blog\" />\n                        </div>\n\n                        <div>\n                        <label htmlFor=\"other\">Other:</label>\n                        <input type=\"text\" value={this.state.other} onChange={this.handleOnChange} name=\"other\" />\n                        </div>\n\n                    </fieldset>\n                    {/* Previous needs to go back, need to figure out how to override form submit */}\n                    <div className=\"buttonDiv\">\n\n                    {/* <button className=\"next\">Next</button> */}\n                    <input type=\"submit\" hidden />\n                    </div>\n\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default About;","import React, { Component } from 'react';\nimport axios from 'axios';\n\n//hiding api hehehehe\nconst API_KEY = process.env.REACT_APP_UNSPLASH_API_KEY;\n\nexport class StyleOptions extends Component {\n    constructor() {\n        super()\n        this.state = {\n            // this is our user's color selection\n            color: '',\n            //don't pass this prop, just to store options for user to pick from\n            background: [],\n            // id of selected background goes here\n            backgroundSelected: '',\n            font: ''\n        };\n        //this is to make call b functions work\n        this.handleChangeColor = this.handleChangeColor.bind(this);\n        this.handleChangeFont = this.handleChangeFont.bind(this);\n        this.handleImageClick = this.handleImageClick.bind(this);\n        this.handleResetClick = this.handleResetClick.bind(this);\n    }\n    \n    bringImages(query, page) {\n        axios({\n            method: 'GET',\n            url: API_KEY,\n            params: {\n                client_id: \"xKKGmMg-rkh2jY_YtDnKWrhn7OirQxRuhXHueyywbdw\",\n                query: 'landing-page-background',\n                color: `${query}`\n            }\n        }).then((res) => {\n            console.log(res.data.results)\n            this.setState({\n                background: res.data.results\n            });\n        })\n    }\n\n    \n    //on change we are getting options value which matched with API param colour\n    handleChangeColor = (event) => {\n        event.preventDefault();\n        const usersColor = event.target.value;\n        \n        //saving to state\n        this.setState({\n            color: usersColor,\n            background: this.state.background,\n            backgroundSelected: this.state.backgroundSelected,\n            font: this.state.font\n        })\n\n        //passing color and page# to bringImages\n        this.bringImages(usersColor);\n\n        // using a timeout function to run function as it runs before the state is set causing issues passing props to Form.js\n        setTimeout(() => {\n            this.propPasser()\n        }, 250)\n\n    }\n\n    handleChangeFont = (event) => {\n        event.preventDefault();\n\n        this.setState({\n            color: this.state.color,\n            background: this.state.background,\n            backgroundSelected: this.state.backgroundSelected,\n            font: event.target.value\n        })\n\n        // using a timeout function to run function as it runs before the state is set causing issues passing props to Form.js\n        setTimeout(() => {\n            this.propPasser()            \n        }, 250)\n    }\n    \n    handleImageClick = (event) => {\n        event.preventDefault();\n        this.setState({\n            color: this.state.color,\n            background: this.state.background,\n            backgroundSelected: event.target.src,\n            font: this.state.backgroundSelected\n        })\n\n        // using a timeout function to run function as it runs before the state is set causing issues passing props to Form.js\n        setTimeout(() => {\n            this.propPasser()\n        }, 250)\n    }\n\n    handleResetClick = (event) => {\n        event.preventDefault();\n\n        //reseting form\n        document.getElementById('stylesForm').reset();\n        //clear state\n        this.setState({\n            color: '',\n            background: [],\n            backgroundSelected: '',\n            font: ''\n        })\n    }\n\n    // put it into it's own function so I can delay it.\n    propPasser = () => {\n        this.props.styleInputs(this.state)\n    }\n\n\n\n    render() {\n        return (\n            <div style={style}>\n                <h1>STYLE OPTIONS</h1>\n\n                {/* this is option for for our font selection */}\n\n                {/* first five fonts from this article\n                https://www.awwwards.com/20-best-web-fonts-from-google-web-fonts-and-font-face.html*/}\n                <form action=\"\" id=\"stylesForm\">\n                    <label htmlFor=\"fonts\">Select your font</label>\n                    {/* listen for changes */}\n                    <select \n                        onChange={this.handleChangeFont} \n                        name=\"fonts\" \n                        id=\"\"\n                    >\n                        <option defaultChecked=\"checked\" value=\"empty\"></option>\n                        <option value=\"alegreya\">Algreya</option>\n                        <option value=\"B612\">B612</option>\n                        <option value=\"muli\">Muli</option>\n                        <option value=\"titillium\">Titillium Web</option>\n                        <option value=\"varela\">Varela</ option>\n                    </select>\n\n                    <label htmlFor=\"chooseColor\">Select your color</label>\n                    {/* every time user passes changes handleChange function activates */}\n                    <select \n                        onChange={this.handleChangeColor} \n                        name=\"color\" \n                        id=\"color\"\n                    >\n                        <option value=\"empty\"></option>\n                        {/* values are equal to api documentation, so don't change them */}\n                        <option value=\"black_and_white\">Black and White</option>\n                        <option value=\"black\">Black</option>\n                        <option value=\"white\">White</option>\n                        <option value=\"yellow\">Yellow</option>\n                        <option value=\"orange\">Orange</option>\n                        <option value=\"red\">Red</option>\n                        <option value=\"purple\">Purple</option>\n                        <option value=\"magenta\">Magenta</option>\n                        <option value=\"green\">Green</option>\n                        <option value=\"teal\">Teal</option>\n                        <option value=\"blue\">Blue</option>\n                    </select>\n                    \n\n                    {/* reset button */}\n                    <button onClick={this.handleResetClick} type=\"reset\">RESET</button>\n                    {/* <input onClick={this.handleResetClick} type=\"reset\" value=\"Reset\"/> */}\n                </form>\n\n                <div>\n                    {this.state.background.map((image) => {\n                        return(\n                            // there are bunch of other options to select\n                            < img\n                                onClick={this.handleImageClick} \n                                key={`${image.id}`} \n                                id={`${image.id}`}\n                                // instead of small can also use small, raw, regular, thumb\n                                src = {`${image.urls.full}`} \n                                alt={`${image.alt_description}`}\n                            />\n                        )\n                    })}\n                </div>\n\n            </div>\n        )\n    }\n}\n\n//temprorary style\nconst style = {\n    backgroundColor: '#E7605C'\n}\n\nexport default StyleOptions\n","import React, { Component } from 'react';\nimport Preview from './Preview.js'\n\nimport About from \"../../About\";\nimport StyleOptions from \"../../StyleOptions.js\"\n\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nclass Form extends Component {\n\n  constructor() {\n    super();\n    //create some state in Form.js for all form inputs so they can be used across forms\n    this.state = {\n      //About params\n      firstName: \"\",\n      lastName: \"\",\n      subtitle: \"\",\n      email: \"\",\n      linkedIn: \"\",\n      twitter: \"\",\n      blog: \"\",\n      other: \"\",\n      // StyleOptions params\n      color: '',\n      font: '',\n      background: [],\n      backgroundSelected: '',\n      // Param for checking page location for back and next links (still todo)\n      step: 'about'\n    }\n  }\n\n  // [\"about\", \"whatever\"]\n  \n  // locationStepForward = () => {\n  //   if (this.state.step === 'about') {\n  //     // <> is called a fragment and gives us the use of a div without actually using one.\n  //     return (<>\n  //             {/* Set the to= to a function that updates state to be our new step then pushes the user to the new route */}\n  //             {/* will need two different functions for back and forward, each will save a state to the appropriate back or forward and then return the string of the component so the user can go forward or back. */}\n              \n  //             </>\n  //             )\n  //             if (link styles)\n  //     // need to update users behaviours\n      \n  //   } else if (this.state.step === \"style\") {\n  //     return \n  //   }\n  // }\n\n  // locationStepBack = () => {\n  //   if (this.state.step === 'StyleOptions') {\n  //     // <> is called a fragment and gives us the use of a div without actually using one.\n  //     return (<> \"/Preview\"\n  //       {/* Set the to= to a function that updates state to be our new step then pushes the user to the new route */}\n  //       {/* will need two different functions for back and forward, each will save a state to the appropriate back or forward and then return the string of the component so the user can go forward or back. */}\n\n  //     </>\n  //     )\n  //     if (link styles)\n  //     // need to update users behaviours\n\n  //   } else if (this.state.step === \"style\") {\n  //     return\n  //   }\n  // }\n  \n  \n  \n  // create handler functions (handle on change) inside Form to update those pieces of state\n  // pass those functions as props to the class components\n  // inside class component, on input change, call those props\n  formParamInputs = (param) => {\n    console.log(param)\n    for (let [key, value] of Object.entries(param)) {\n      this.setState({\n        [key]: value,\n\n      })\n    }\n  }\n\n  styleParamInputs = (param) => {\n    console.log(param);\n    for (let [key, value] of Object.entries(param)) {\n      this.setState({\n        [key]: value,\n      })\n    }\n  }\n\n\n  render() {\n    // console.log(this.props)\n    return (\n      <Router>\n      <div className=\"formContainer\">\n        {/* <About /> */}\n        <nav>\n            <Link to={\"/about\"}>Back</Link>\n            {/* Piece of state to  */}\n            {/* create an array to store the steps and use said array plus the value in state to determine where we are in the flow. */}\n            <Link to=\"/styles\">Next</Link>\n\n            <Link to=\"/preview\">NNNNext</Link>\n            {/* <Link to=\"/codeCopy\">Next</Link> */}\n        </nav>\n          <Route exact path=\"/about\" \n            render={(props) =>\n                <About formInputs={this.formParamInputs} {...props}/>}/>\n\n          <Route exact path=\"/styles\" \n            render={(props) => \n              <StyleOptions styleInputs={this.styleParamInputs} {...props} />} />\n\n          <Route exact path=\"/preview\" \n            render={(props) => \n              <Preview previewInputs={this.state} {...props} />} \n          />\n        \n          {/* <Route exact path=\"/codeCopy\" render={(props) => <PasteCode formInputs={this.state} {...props} />} /> */}\n      </div>\n      \n\n      </Router>\n    )\n  }\n}\n\nexport default Form;","import React, { Component } from 'react';\nimport Header from './components/header/Header.js'\nimport Footer from './components/footer/Footer.js'\nimport Form from './components/form/Form.js'\nimport './App.css';\n\n\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n    }\n  }\n  \n  render() {\n    return (\n      <div className=\"mainContent wrapper\">\n        <div className=\"mainGrid\">\n        <Header />\n\n        <Form />\n        </div>\n        <Footer />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}